package main.java.user_interface.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import main.java.model.Beer;
import main.java.service.BeerService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;

/**
 * BeerForm enthält ein Gui zum darstellen von Api-Antworten
 */
public class BeerForm {
    public JPanel mainPanel;
    private JList<String> listResults;
    private JButton mainButton;
    private JRadioButton radioButtonAllStyles;
    private JRadioButton radioButtonStyle;
    private JRadioButton radioButtonAllBeers;
    private JRadioButton radioButtonBeerWithId;
    private JTextField textFieldArgs;


    private BeerService beerService = new BeerService();

    /**
     * Konstruktor der Klasse BeerForm
     */
    public BeerForm() {
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(radioButtonAllStyles);
        buttonGroup.add(radioButtonStyle);
        buttonGroup.add(radioButtonAllBeers);
        buttonGroup.add(radioButtonBeerWithId);

        mainButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Selektieren Button ausfindig machen
                AbstractButton selectedButton = null;
                for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements(); ) {
                    AbstractButton button = buttons.nextElement();
                    if (button.isSelected()) {
                        selectedButton = button;
                    }
                }

                //Model um das hinzufügen von Zeilen zu ermöglichen
                DefaultListModel<String> list = ((DefaultListModel<String>) listResults.getModel());
                //Jedes mal zuerst die Liste Leeren
                list.clear();
                if (selectedButton == radioButtonAllStyles) {
                    /*
                     * Erzeugt Guiausgabe der Bierarten.
                     * Die id wird mit "::" vor dem Bierart Namen ausgeben.
                     * */
                    beerService.getBeerStyles()
                            .forEach((k, v) -> list.addElement(k + "::" + v));
                } else if (selectedButton == radioButtonStyle) {
                    /*
                     *  Erzeugt Guiausgabe der Bierarten, welche die Zeichenfolge ″search″ im Namen enthalten.
                     *  Die id wird mit "::" vor dem Bierart Namen ausgeben.
                     *
                     *  @param searchString Zeichenfolge die enthalten sein soll
                     * */
                    beerService.getBeerStylesBySearchStr(textFieldArgs.getText())
                            .forEach((k, v) -> list.addElement(k + "::" + v));
                } else if (selectedButton == radioButtonAllBeers) {
                    /*
                     * Gibt zeilenweise ID und Name mit "::" getrennt der Biere aus.
                     * */
                    beerService.getBeers()
                            .forEach(x -> list.addElement((x.getId() + "::" + x.getName())));
                } else if (selectedButton == radioButtonBeerWithId) {
                    /*
                     * Gibt in einer Zeile ID und Namen und in einer zweiten Zeile die Beschreibung
                     * des entsprechenden Bieres aus.
                     *
                     * @param id id nach der gesucht werden soll
                     * */
                    Beer beer = beerService.getBeerById(textFieldArgs.getText());
                    if (beer != null) {
                        list.addElement(beer.getId() + "::" + beer.getName());
                    }
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        listResults = new JList();
        listResults.setDoubleBuffered(true);
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        listResults.setModel(defaultListModel1);
        listResults.setValueIsAdjusting(false);
        scrollPane1.setViewportView(listResults);
        mainButton = new JButton();
        mainButton.setText("Button");
        mainPanel.add(mainButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        radioButtonAllStyles = new JRadioButton();
        radioButtonAllStyles.setLabel("Alle Styles");
        radioButtonAllStyles.setSelected(true);
        radioButtonAllStyles.setText("Alle Styles");
        panel1.add(radioButtonAllStyles, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButtonStyle = new JRadioButton();
        radioButtonStyle.setLabel("Ein Style");
        radioButtonStyle.setSelected(false);
        radioButtonStyle.setText("Ein Style");
        panel1.add(radioButtonStyle, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButtonAllBeers = new JRadioButton();
        radioButtonAllBeers.setLabel("Alle Biere");
        radioButtonAllBeers.setText("Alle Biere");
        panel1.add(radioButtonAllBeers, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButtonBeerWithId = new JRadioButton();
        radioButtonBeerWithId.setActionCommand("Beer mit bestimmter Style");
        radioButtonBeerWithId.setLabel("Beer mit bestimmter Id");
        radioButtonBeerWithId.setText("Beer mit bestimmter Id");
        panel1.add(radioButtonBeerWithId, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldArgs = new JTextField();
        mainPanel.add(textFieldArgs, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
